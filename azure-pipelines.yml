# Node.js Function App to Linux on Azure
# Build a Node.js function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main
pool: 
  name: Default

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '4ea4d60c-15bc-4ad2-96bd-4a72deaf74d8'

  # Function app name
  functionAppName: 'qrcode-devopswithritesh'

  # Environment name
  environmentName: 'qrcode-devopswithritesh'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build

    steps:
    - task: Bash@3
      displayName: 'Install zip utility'
      inputs:
        targetType: 'inline'
        script: 'sudo apt-get update && sudo apt-get install -y zip'
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        cd qrCodeGenerator
        npm install
        npm run build --if-present
        npm run test --if-present
      displayName: 'Prepare binaries'
    
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/qrCodeGenerator/GenerateQRCode/'
        Contents: '**'
        TargetFolder: '$(System.DefaultWorkingDirectory)/qrCodeGenerator/'
      displayName: 'Copy Files to Build Directory'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/qrCodeGenerator'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/qrCodeGenerator/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/qrCodeGenerator/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded() # This stage will run only if first stage is succeeded
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    pool: 
     name: Default
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@2
            inputs:
              connectedServiceNameARM: 'Pay-As-You-Go(4accce4f-9342-4b5d-bf6b-5456d8fa879d)'
              appType: 'functionApp'
              appName: '$(functionAppName)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildID).zip'
              deploymentMethod: 'zipDeploy'